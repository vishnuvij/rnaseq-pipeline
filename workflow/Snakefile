configfile: "../config.yaml"

# --- Directories ---
FASTQC_DIR = "results/fastqc"
TRIM_DIR   = "results/trimmed"
ALIGN_DIR  = "results/alignment"
REF_DIR    = "reference"

# --- Config-driven inputs ---
SAMPLES = config["samples"]
GENOME_FASTA_GZ = f"{REF_DIR}/{config['reference']['name']}.fa.gz"
STAR_INDEX = f"{REF_DIR}/star_index"

# Optional safety: if Snakemake ever sees ambiguity, prefer raw FastQC first
ruleorder: fastqc_raw > fastqc_trimmed

# --- Final target(s) ---
rule all:
    input:
        # one BAM per sample
        expand(f"{ALIGN_DIR}/{{sample}}.bam", sample=SAMPLES),
        # one combined QC dashboard
        "results/multiqc_report.html"

# --- Download FASTQ ---
rule download_fastq:
    output:
        "data/{sample}.fastq.gz"
    shell:
        """
        fastq-dl --accession {wildcards.sample} --outdir data --provider ena
        """

# --- FastQC on raw reads (use _raw_ to avoid name clashes) ---
rule fastqc_raw:
    input:
        "data/{sample}.fastq.gz"
    output:
        html = f"{FASTQC_DIR}/{{sample}}_raw_fastqc.html",
        zip  = f"{FASTQC_DIR}/{{sample}}_raw_fastqc.zip"
    shell:
        """
        mkdir -p {FASTQC_DIR}
        fastqc {input} --outdir {FASTQC_DIR}
        """

# --- Trimming ---
rule trim_reads:
    input:
        "data/{sample}.fastq.gz"
    output:
        f"{TRIM_DIR}/{{sample}}_trimmed.fastq.gz"
    threads: 2
    params:
        adapter = "AGATCGGAAGAGC",
        q = 20,
        minlen = 20
    shell:
        """
        mkdir -p {TRIM_DIR}
        cutadapt -j {threads} -a {params.adapter} -q {params.q} -m {params.minlen} \
          -o {output} {input}
        """

# --- FastQC on trimmed reads ---
rule fastqc_trimmed:
    input:
        f"{TRIM_DIR}/{{sample}}_trimmed.fastq.gz"
    output:
        html = f"{FASTQC_DIR}/{{sample}}_trimmed_fastqc.html",
        zip  = f"{FASTQC_DIR}/{{sample}}_trimmed_fastqc.zip"
    shell:
        """
        mkdir -p {FASTQC_DIR}
        fastqc {input} --outdir {FASTQC_DIR}
        """

# --- Reference genome ---
rule download_reference:
    output:
        GENOME_FASTA_GZ
    shell:
        f"""
        mkdir -p {REF_DIR}
        wget -O {{output}} {config['reference']['url']}
        """

# --- STAR index (FASTA-only is fine for demo) ---
rule star_index:
    input:
        GENOME_FASTA_GZ
    output:
        directory(STAR_INDEX)
    threads: 4
    shell:
        """
        mkdir -p {output}
        gunzip -c {input} > {REF_DIR}/genome.fa
        STAR --runThreadN {threads} \
             --runMode genomeGenerate \
             --genomeDir {output} \
             --genomeFastaFiles {REF_DIR}/genome.fa
        """

# --- STAR alignment (sorted BAM) ---
rule star_align:
    input:
        reads = f"{TRIM_DIR}/{{sample}}_trimmed.fastq.gz",
        index = STAR_INDEX
    output:
        f"{ALIGN_DIR}/{{sample}}.bam"
    threads: 4
    shell:
        """
        mkdir -p {ALIGN_DIR}
        STAR --runThreadN {threads} \
             --genomeDir {input.index} \
             --readFilesIn {input.reads} \
             --readFilesCommand zcat \
             --outSAMtype BAM SortedByCoordinate \
             --outFileNamePrefix {ALIGN_DIR}/{wildcards.sample}_
        mv {ALIGN_DIR}/{wildcards.sample}_Aligned.sortedByCoord.out.bam {output}
        """

# --- MultiQC across all samples (raw + trimmed FastQC) ---
rule multiqc:
    input:
        expand(f"{FASTQC_DIR}/{{sample}}_raw_fastqc.html", sample=SAMPLES) +
        expand(f"{FASTQC_DIR}/{{sample}}_trimmed_fastqc.html", sample=SAMPLES)
    output:
        "results/multiqc_report.html"
    shell:
        """
        multiqc results/fastqc --outdir results
        """
